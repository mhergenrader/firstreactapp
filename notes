- don't really need to worry too much about index.html - just a template, and
  most everything in React is done

- npm test = keeps an auto watch as well! cool!

- can start mocking up static version of how to render in just JSX

- there is an available defaultChecked property available

rendered view should be function of app state (functional)
want state to be in sync w/ view; this is accomplished via previous line


create-react-app comes w/ jest for testing, so can build items in test-driven
style
- note here that we wrote a test first and then wrote the code after to make
  the test pass: TDD
- and tests effectively serve as a more detailed contract of pre- and post-
  conditions - they define the contract and high-level behavior of what we
  should expect from certain things that we put under test
  - the code itself can do some error checking, etc. (and tests should try
    to potentially hit that), but tests should test the intended behaviors as 
    well
    - and in TDD, we can determine these constraints and possible error
      conditions ahead of time to then give us the ability to do proper error
      checking in the code right away w/o much thought! that is, we can think
      of the general contract and constraints for something to test and then the
      code just implements what should be done in addition to just implementing
      those constraints and how it should behave! test-first helps us design our
      functions, etc. directly! (in an unbiased way because we are stating
      upfront via tests first exactly how this function, etc. should act)
- also good to do TDD because then if we change things, we can either set up
  the latest assumptions in our tests and have essentially a checklist of what
  new things to apply to our function under test or we can implement changes
  and then see any existing tests/assertions fail (former is likely better)
  - corollary: gives you confidence in refactoring that when you change
    something and tests still pass, you have a valid replacement (or can have
    decent confidence, assuming you have comprehensive enough tests)
- Arrange, Act, Assert as the unit test setup (pretty self-explanatory)

- remember that the key property is important for react for any output dom
  elements - it allows quickly calculation for the virtual DOM to see what
  has changed - we don't necessarily need every single item in a react app to
  have a unique key/id, but we do need, if these elements are mapped to a
  collection of DOM elements/represented by them, that output list to have
  a key for each of those elements that is unique, and this should come from
  the underlying collection (not just the index in the array - that's bad)

- I'm starting to see the benefits of having a more centralized state store like
  I believe Redux is - we keep all state centralized and at a high level for 
  simple placement and querying and accessibility for components (note how we
  had to make Router at the highest level of the tree such that all components
  could then query the route/url state)

json-server = handy lightweight server that serves up some json and allows us
to persist into some file
$ json-server -p 8080 --watch db.json

fetch API is an experimental new way of requesting data from a server; it is
supportive of PRomise-based API; it is the experimental replacement for
XMLHttpRequest
https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
- also provides definitions for CORS and HTTP origin headers
- GlobalFetch.fetch is the technical method - implemented in some browsers on window
  and web workers
- fetch takes just the server location as request (path) and then returns
  Response object wrapped in a promise
- not under ECMAscript - this is just a browser/web api

TODO:
- look at the reexport setup of index.js in components/todo
- // TODO: what is the default context in ES6? still undefined in strict mode? are we strict mode by default?
- look more at the React context mechanism for components
  - in our example, this was used to handle the case where passing down values could be a
    maintenance nightmare through many levels (e.g. passing a callback)
  - I wonder if multiple ancestors return a context object that they get merged? I would assume so
  - and it seems to consume context object properly, we can just go to this.context, but also
    just good for class API to set up the contextTypes static property (like propTypes) so we can
    announce (and validate) what we are consuming as a descendant element
- even if something isn't modified, shouldn't we still return a copy? or is it just that mutations
  alone require making new copies (and that if we return the same array reference it is ok,
  provided we don't change it? is returning new copy no matter what best practice?)
  - seems like it would be for auditing, where each time we change the route state, then we
    have our own copy of the array (which should be equal to the original)
    - on the other hand, perhaps that would be overkill
  - context: filterTodos
- from Router: // TODO: learn more about why event handlers/AJAX requests best kept to after DOM loading done